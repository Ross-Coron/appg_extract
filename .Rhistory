appg_info <- bind_rows(appg_info, tibble(
version = url_tibble$version[1],
name = tables[[1]]$X2[[1]],
description = tables[[1]]$X2[[2]],
chair_name = tables[[2]]$X2[[3]],
chair_party = tables[[2]]$X3[[3]],
benefit_source = tables[[6]]$X1[[3]],
benefit_value = tables[[6]]$X3[[3]]
))
View(appg_info)
View(filtered_urls)
url2 <- pluck(filtered_urls$url[1])
cmd <- paste("curl -A 'Mozilla/5.0'", url2)
new_html <- system(cmd, intern = TRUE)
head(new_html)
new_html_text <- new_html %>%
paste(collapse = "\n") %>%
read_html()
tables <- html_table(new_html_text, fill = TRUE)
appg_info <- bind_rows(appg_info, tibble(
version = url_tibble$version[1],
name = tables[[1]]$X2[[1]],
description = tables[[1]]$X2[[2]],
chair_name = tables[[2]]$X2[[3]],
chair_party = tables[[2]]$X3[[3]],
benefit_source = tables[[6]]$X1[[3]],
benefit_value = tables[[6]]$X3[[3]]
))
View(appg_info)
url2 <- pluck(filtered_urls$url[2])
url2 <- pluck(filtered_urls$url[2])
cmd <- paste("curl -A 'Mozilla/5.0'", url2)
new_html <- system(cmd, intern = TRUE)
head(new_html)
new_html_text <- new_html %>%
paste(collapse = "\n") %>%
read_html()
tables <- html_table(new_html_text, fill = TRUE)
appg_info <- bind_rows(appg_info, tibble(
version = url_tibble$version[1],
name = tables[[1]]$X2[[1]],
description = tables[[1]]$X2[[2]],
chair_name = tables[[2]]$X2[[3]],
chair_party = tables[[2]]$X3[[3]],
benefit_source = tables[[6]]$X1[[3]],
benefit_value = tables[[6]]$X3[[3]]
))
View(appg_info)
tables <- html_table(new_html_text, fill = TRUE)
tables
appg_info <- bind_rows(appg_info, tibble(
version = url_tibble$version[1],
name = tables[[1]]$X2[[1]],
description = tables[[1]]$X2[[2]],
chair_name = tables[[2]]$X2[[3]],
chair_party = tables[[2]]$X3[[3]],
benefit_source = pluck(tables[[6]]$X1[[3]],  .default =  NA),
benefit_value = pluck(tables[[6]]$X3[[3]],  .default =  NA)
))
library(purr)
library(purrr)
appg_info <- bind_rows(appg_info, tibble(
version = url_tibble$version[1],
name = tables[[1]]$X2[[1]],
description = tables[[1]]$X2[[2]],
chair_name = tables[[2]]$X2[[3]],
chair_party = tables[[2]]$X3[[3]],
benefit_source = pluck(tables[[6]]$X1[[3]],  .default =  NA),
benefit_value = pluck(tables[[6]]$X3[[3]],  .default =  NA)
))
appg_info <- bind_rows(appg_info, tibble(
version = url_tibble$version[1],
name = tables[[1]]$X2[[1]],
description = tables[[1]]$X2[[2]],
chair_name = tables[[2]]$X2[[3]],
chair_party = tables[[2]]$X3[[3]],
benefit_source = pluck(tables, [[6]]$X1[[3]],  .default =  NA),
appg_info <- bind_rows(appg_info, tibble(
version = url_tibble$version[1],
name = tables[[1]]$X2[[1]],
description = tables[[1]]$X2[[2]],
chair_name = tables[[2]]$X2[[3]],
chair_party = tables[[2]]$X3[[3]],
benefit_source = pluck(tables, 6, "X1", 3,  .default =  NA),
benefit_value = pluck(tables[[6]]$X3[[3]],  .default =  NA)
))
appg_info <- bind_rows(appg_info, tibble(
version = url_tibble$version[1],
name = tables[[1]]$X2[[1]],
description = tables[[1]]$X2[[2]],
chair_name = tables[[2]]$X2[[3]],
chair_party = tables[[2]]$X3[[3]],
benefit_source = pluck(tables, 6, "X1", 3,  .default =  NA),
benefit_value = pluck(tables, 6, "X3", 3,  .default =  NA)
))
View(appg_info)
appg_info <- data.frame(
version = character(),
name = character(),
description = character(),
chair_name = character(),
chair_party = character(),
benefit_source = character(),
benefit_value = character()
)
appg_info <- bind_rows(appg_info, tibble(
version = url_tibble$version[1],
name = tables[[1]]$X2[[1]],
description = tables[[1]]$X2[[2]],
chair_name = tables[[2]]$X2[[3]],
chair_party = tables[[2]]$X3[[3]],
benefit_source = tables[[6]]$X1[[3]],
benefit_value = tables[[6]]$X3[[3]]
))
View(appg_info)
url2 <- pluck(filtered_urls$url[1])
url2 <- pluck(filtered_urls$url[1])
cmd <- paste("curl -A 'Mozilla/5.0'", url2)
new_html <- system(cmd, intern = TRUE)
head(new_html)
new_html_text <- new_html %>%
paste(collapse = "\n") %>%
read_html()
tables <- html_table(new_html_text, fill = TRUE)
length(tables)
tables[[1]]
tables[[2]]
tables[[3]]
tables[[4]]
tables[[5]]
tables[[6]]
appg_info <- data.frame(
version = character(),
name = character(),
description = character(),
chair_name = character(),
chair_party = character(),
benefit_source = character(),
benefit_value = character()
)
appg_info <- bind_rows(appg_info, tibble(
version = url_tibble$version[1],
name = tables[[1]]$X2[[1]],
description = tables[[1]]$X2[[2]],
chair_name = tables[[2]]$X2[[3]],
chair_party = tables[[2]]$X3[[3]],
benefit_source = tables[[6]]$X1[[3]],
benefit_value = tables[[6]]$X3[[3]]
))
url2 <- pluck(filtered_urls$url[2])
cmd <- paste("curl -A 'Mozilla/5.0'", url2)
new_html <- system(cmd, intern = TRUE)
head(new_html)
new_html_text <- new_html %>%
paste(collapse = "\n") %>%
read_html()
tables <- html_table(new_html_text, fill = TRUE)
appg_info <- bind_rows(appg_info, tibble(
version = url_tibble$version[1],
name = tables[[1]]$X2[[1]],
description = tables[[1]]$X2[[2]],
chair_name = tables[[2]]$X2[[3]],
chair_party = tables[[2]]$X3[[3]],
benefit_source = pluck(tables, 6, "X1", 3,  .default =  NA),
benefit_value = pluck(tables, 6, "X3", 3,  .default =  NA)
))
View(appg_info)
# Define the path to your Downloads folder (macOS)
downloads_path <- file.path(Sys.getenv("HOME"), "Downloads")
# List all files in the Downloads folder
file_list <- list.files(path = downloads_path)
# Filter only those with a colon in the name
names_with_colon <- grep(":", file_list, value = TRUE)
file_list
extracted_names <- sub(".*:(.*)", "\\1", names_with_colon)
extracted_names
# Check which file names contain the fullwidth colon
has_fullwidth_colon <- grepl("：", file_list)
# Subset to only those
names_with_fw_colon <- file_list[has_fullwidth_colon]
# Extract the part after the fullwidth colon
extracted_names <- sapply(strsplit(names_with_fw_colon, "："), function(x) {
if (length(x) > 1) x[2] else NA
})
extracted_names
# Extract the part after the fullwidth colon
extracted_names <- sapply(strsplit(names_with_fw_colon, "："), function(x) {
if (length(x) > 1) x[2] else NA
name <- x[2]
# Trim leading whitespace and remove ".html" suffix
cleaned <- sub("^\\s+", "", name)
sub("\\.html$", "", cleaned, ignore.case = TRUE)
} else {
extracted_names <- sapply(strsplit(names_with_fw_colon, "："), function(x) {
if (length(x) > 1) {
name <- x[2]
# Trim leading whitespace and remove ".html" suffix
cleaned <- sub("^\\s+", "", name)
sub("\\.html$", "", cleaned, ignore.case = TRUE)
} else {
NA
}
})
extracted_names
x <- readLines("2024-24-01_urls.txt")
setwd("~/Documents/Programming/R/appg_extract")
x <- readLines("2024-24-01_urls.txt")
x <- readLines("2024-24-01_urls.txt")
final_parts <- sub(".*/", "", x)
cleaned_parts <- sub("\\.htm$", "", final_parts, ignore.case = TRUE)
cleaned_parts
final_result <- gsub("-", " ", cleaned_parts)
final_result
duplicate_flags <- duplicated(final_result)
final_result
duplicate_flags
final_result
extracted_names
extracted_names <- tolower(extracted_names)
extracted_names
final_result
extracted_names
common_elements <- intersect(extracted_names, final_result)
print(common_elements)
only_in_v1 <- setdiff(extracted_names, final_result)
print(only_in_v1)
extracted_names
final_result
only_in_v1
extracted_names
final_result
extracted_names <- tolower(extracted_names)
extracted_names <- gsub("[^A-Za-z0-9]", "", extracted_names)
only_in_v1 <- setdiff(extracted_names, final_result)
print(only_in_v1)
final_result <- gsub("[^A-Za-z0-9]", "", extracted_names)
only_in_v1 <- setdiff(extracted_names, final_result)
print(only_in_v1)
only_in_v1 <- setdiff(final_result, extracted_names)
print(only_in_v1)
common_elements <- intersect(final_result, extracted_names)
print(common_elements)
# Define the path to your Downloads folder (macOS)
downloads_path <- file.path(Sys.getenv("HOME"), "Downloads")
# List all files in the Downloads folder
file_list <- list.files(path = downloads_path)
# Check which file names contain the fullwidth colon
has_fullwidth_colon <- grepl("：", file_list)
# Subset to only those
names_with_fw_colon <- file_list[has_fullwidth_colon]
extracted_names <- sapply(strsplit(names_with_fw_colon, "："), function(x) {
if (length(x) > 1) {
name <- x[2]
# Trim leading whitespace and remove ".html" suffix
cleaned <- sub("^\\s+", "", name)
sub("\\.html$", "", cleaned, ignore.case = TRUE)
} else {
NA
}
})
extracted_names <- tolower(extracted_names)
extracted_names <- gsub("[^A-Za-z0-9]", "", extracted_names)
x <- readLines("2024-24-01_urls.txt")
final_parts <- sub(".*/", "", x)
cleaned_parts <- sub("\\.htm$", "", final_parts, ignore.case = TRUE)
final_result <- gsub("-", " ", cleaned_parts)
final_result <- gsub("[^A-Za-z0-9]", "", extracted_names)
x <- readLines("2024-24-01_urls.txt")
final_parts <- sub(".*/", "", x)
cleaned_parts <- sub("\\.htm$", "", final_parts, ignore.case = TRUE)
final_result <- gsub("-", " ", cleaned_parts)
x <- readLines("2024-24-01_urls.txt")
final_result <- gsub("[^A-Za-z0-9]", "", final_result)
x <- readLines("2024-24-01_urls.txt")
final_parts <- sub(".*/", "", x)
cleaned_parts <- sub("\\.htm$", "", final_parts, ignore.case = TRUE)
final_result <- gsub("-", " ", cleaned_parts)
final_result <- gsub("[^A-Za-z0-9]", "", final_result)
common_elements <- intersect(final_result, extracted_names)
print(common_elements)
common_elements <- setdiff(final_result, extracted_names)
print(common_elements)
test <- clean_appg_urls %>%
filter(register_version == "2024-01-24")
saveRDS(clean_appg_urls, file = "clean_appg_urls.rds")
clean_appg_urls <- readRDS("clean_appg_urls.rds")
View(clean_appg_urls)
test <- clean_appg_urls %>%
filter(register_version == "2023-01-21")
library(dplyr)
clean_appg_urls <- readRDS("clean_appg_urls.rds")
test <- clean_appg_urls %>%
filter(register_version == "2023-01-21")
View(test)
test <- clean_appg_urls %>%
filter(register_version == "2024-01-24")
View(clean_appg_urls)
test <- clean_appg_urls %>%
filter(register_version == "2023-01-11")
writeLines(test$appg_url, "2023-01-11_urls.txt")
View(clean_appg_urls)
test <- clean_appg_urls %>%
filter(register_version == "2025-01-02")
View(test)
writeLines(test$appg_url, "2025-01-02_urls.txt")
View(clean_appg_urls)
test <- clean_appg_urls %>%
filter(register_version == "2022-02-09")
writeLines(test$appg_url, "2025-01-02_urls.txt")
test <- clean_appg_urls %>%
filter(register_version == "2025-01-02")
writeLines(test$appg_url, "2025-01-02_urls.txt")
test <- clean_appg_urls %>%
filter(register_version == "2022-02-09")
writeLines(test$appg_url, "2022-02-09_urls.txt")
test <- clean_appg_urls %>%
filter(register_version == "2021-01-27")
writeLines(test$appg_url, "2021-01-27_urls.txt")
test <- clean_appg_urls %>%
filter(register_version == "2020-02-24")
writeLines(test$appg_url, "2020-02-24_urls.txt")
test <- clean_appg_urls %>%
filter(register_version == "2019-05-08")
writeLines(test$appg_url, "2019-05-08_urls.txt")
test <- clean_appg_urls %>%
filter(register_version == "2025-02-12")
test <- clean_appg_urls %>%
filter(register_version == "2025-02-12")
writeLines(test$appg_url, "2025-02-12_urls.txt")
test <- clean_appg_urls %>%
filter(register_version == "2024-11-20")
writeLines(test$appg_url, "2024-11-20_urls.txt")
test <- clean_appg_urls %>%
filter(register_version == "2024-10-09")
test <- clean_appg_urls %>%
filter(register_version == "2024-10-09")
writeLines(test$appg_url, "2024-10-09_urls.txt")
test <- clean_appg_urls %>%
filter(register_version == "2024-08-28")
test <- clean_appg_urls %>%
filter(register_version == "2024-08-28")
test <- clean_appg_urls %>%
filter(register_version == "2024-08-28")
writeLines(test$appg_url, "2024-08-28_urls.txt")
test <- clean_appg_urls %>%
filter(register_version == "2024-05-30")
test <- clean_appg_urls %>%
filter(register_version == "2024-05-30")
writeLines(test$appg_url, "2024-05-30_urls.txt")
test <- clean_appg_urls %>%
filter(register_version == "2024-05-13")
test <- clean_appg_urls %>%
filter(register_version == "2024-05-13")
test <- clean_appg_urls %>%
filter(register_version == "2024-05-13")
writeLines(test$appg_url, "2024-05-13_urls.txt")
test <- clean_appg_urls %>%
filter(register_version == "2024-04-08")
test <- clean_appg_urls %>%
filter(register_version == "2024-04-08")
writeLines(test$appg_url, "2024-04-08_urls.txt")
test <- clean_appg_urls %>%
filter(register_version == "2024-03-06")
test <- clean_appg_urls %>%
filter(register_version == "2024-03-06")
writeLines(test$appg_url, "2024-03-06_urls.txt")
View(clean_appg_urls)
test <- clean_appg_urls %>%
filter(register_version == "2024-06-18")
test <- clean_appg_urls %>%
filter(register_version == "2025-06-18")
test <- clean_appg_urls %>%
filter(register_version == "2025-06-18")
writeLines(test$appg_url, "2025-06-18_urls.txt")
test <- clean_appg_urls %>%
filter(register_version == "2019-05-08")
test <- clean_appg_urls %>%
filter(register_version == "2020-02-24")
test <- clean_appg_urls %>%
filter(register_version == "2021-01-27")
test <- clean_appg_urls %>%
filter(register_version == "2022-02-09")
test <- clean_appg_urls %>%
filter(register_version == "2023-01-11")
test <- clean_appg_urls %>%
filter(register_version == "2024-01-24")
test <- clean_appg_urls %>%
filter(register_version == "2025-01-02")
test <- clean_appg_urls %>%
filter(register_version == "2024-01-24")
test <- clean_appg_urls %>%
filter(register_version == "2024-03-06")
test <- clean_appg_urls %>%
filter(register_version == "2024-04-08")
test <- clean_appg_urls %>%
filter(register_version == "2024-05-13")
test <- clean_appg_urls %>%
filter(register_version == "2024-05-30")
test <- clean_appg_urls %>%
filter(register_version == "2024-08-28")
test <- clean_appg_urls %>%
filter(register_version == "2024-10-09")
test <- clean_appg_urls %>%
filter(register_version == "2024-11-20")
test <- clean_appg_urls %>%
filter(register_version == "2025-02-12")
test <- clean_appg_urls %>%
filter(register_version == "2025-02-12")
writeLines(test$appg_url, "2025-06-18_urls.txt")
test <- clean_appg_urls %>%
filter(register_version == "2025-02-12")
test <- clean_appg_urls %>%
filter(register_version == "2025-02-12")
writeLines(test$appg_url, "2025-02-12_urls.txt")
styler:::set_style_transformers()
raw_appg_df <- tibble(
name = character(),
html_code = character
)
raw_appg_df <- tibble(
name = character(),
html_code = character()
)
raw_appg_df <- tibble(
name = character(),
html_code = character()
)
setwd("~/Documents/Programming/R/appg")
?list.files
files <- list.files(path="\html_files", full.names=TRUE, recursive=FALSE)
files <- list.files(path="/html_files", full.names=TRUE, recursive=FALSE)
files <- list.files(path="/appg_html_files", full.names=TRUE, recursive=FALSE)
setwd("~/Documents/Programming/R/appg")
files <- list.files(path="~/appg_html_files", full.names=TRUE, recursive=FALSE)
files <- list.files(path="./appg_html_files", full.names=TRUE, recursive=FALSE)
files
?list.files
?perl
files <- list.files(path="./appg_html_files", full.names=TRUE, recursive=FALSE)
files <- files[!grepl("\\.txt$", files)]
files
appg_names <- gsub(files, str_extract(appg_names, "(?<=2025: ).*?(?=\\(29_)"))
appg_names <- str_extract(files, "(?<=2025: ).*?(?=\\(29_)")
library(stringr)
appg_names <- str_extract(files, "(?<=2025: ).*?(?=\\(29_)")
appg_names
# Filter out non-HTML files
files <- files[!grepl("\\.txt$", files)]
appg_names <- str_extract(files, "(?<=2025: ).*?(?=\\(29_)")
appg_names
print(files)
appg_names <- str_extract(files, "(?<=2025： ).*?(?=\\(29_06)")
appg_names
appg_names <- str_extract(files, "(?<=2025：).*?(?=\\(29_06)")
appg_names
appg_names <- str_extract(files, "(?<=2025：).*?(?=\\(29_06))
appg_names
appg_names
# Filter out non-HTML files
files <- files[!grepl("\\.txt$", files)]
# Filter out non-HTML files
files <- files[!grepl("\\.txt$", files)]
appg_names <- str_extract(files, "(?<=2025：).*?(?=\\(29_06))
appg_names <- str_extract(files, "(?<=2025：).*?(?=\\(29_06)")
# Filter out non-HTML files
files <- files[!grepl("\\.txt$", files)]
appg_names <- str_extract(files, "(?<=2025：).*?(?=\\(29_06)")
appg_names
appg_names <- str_extract(files, "(?<=2025：).*?(?=\\(29_06)") |>
str_trim()
appg_names
length(appg_names)
html_list <- lapply(files, readLines)
html_list
View(html_list)
html_list[[1]]
tmp_file <- tempfile(fileext = ".html")
writeLines(html_list[[1]], tmp_file)
# Open in browser
browseURL(tmp_file)
install.packages("IRdisplay")
library(IRdisplay)
display_html(html_list[[1]])
cat(html_list[[1]])
tmp_file <- tempfile(fileext = ".html")
writeLines(html_list[[1]], tmp_file)
# Open in browser
browseURL(tmp_file)
raw_appg_df <- tibble(
name = appg_names,
html_code = html_vector
)
tmp_file <- tempfile(fileext = ".html")
writeLines(html_list[[1]], tmp_file)
# Get APPG names
appg_names <- str_extract(files, "(?<=2025：).*?(?=\\(29_06)") |>
str_trim()
html_vector <- lapply(files, readLines)
html_vector <- lapply(files, readLines)
tmp_file <- tempfile(fileext = ".html")
writeLines(html_list[[1]], tmp_file)
raw_appg_df <- tibble(
name = appg_names,
html_code = html_vector
)
View(raw_appg_df)
View(raw_appg_df)
View(raw_appg_df)
raw_appg_df <- tibble(
name = appg_names,
html_code = html_vector
)
